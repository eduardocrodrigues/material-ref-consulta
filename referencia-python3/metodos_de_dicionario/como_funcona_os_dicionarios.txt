######################################
#
# Como funciona os Dicionários
#
######################################

--------------------------
O que é um dicionário?
--------------------------

O dicionário é outra estrutura de dados Python. Não é um tipo de sequência (mas pode ser 
facilmente adaptado ao processamento de sequências) e é mutável.

Para explicar o que é realmente o dicionário Python, 
é importante compreender que se trata literalmente de um dicionário.

O dicionário Python funciona da mesma forma que um dicionário bilingue. Por exemplo, tem uma palavra 
inglesa (por exemplo, cat) e precisa do seu equivalente francês. Navega no dicionário para 
encontrar a palavra (pode usar diferentes técnicas para o fazer - não importa) e eventualmente obtém-na. A seguir, 
verifica a palavra equivalente em francês e é (muito provavelmente) a palavra "chat".

No mundo de Python, a palavra que se procura chama-se: Key. A palavra que obtém do dicionário chama-se: value.

Isto significa que um dicionário é um conjunto de pares de key-values (chave-valores). 

    Nota:

      cada chave deve ser única - não é possível ter mais do que uma chave com o mesmo valor;
      uma chave pode ser qualquer tipo de objeto imutável: pode ser um número (inteiro ou float), ou mesmo uma string, mas não uma lista;
      um dicionário não é uma lista - uma lista contém um conjunto de valores numerados, enquanto que um dicionário contém pares de valores;
      a função len() funciona também para dicionários - devolve o número de elementos de key-value no dicionário;
      um dicionário é uma ferramenta de sentido único - se tiver um dicionário inglês-francês, pode procurar por equivalentes franceses de termos ingleses, mas não vice-versa. 


----------------------------
Como fazer um dicionário?
----------------------------

Se quiser atribuir alguns pares iniciais a um dicionário, deverá utilizar a seguinte sintaxe:

  dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}
  phone_numbers = {'boss': 5551234567, 'Suzy': 22657854310}
  empty_dictionary = {}

  print(dictionary)
  print(phone_numbers)
  print(empty_dictionary)


No primeiro exemplo, o dicionário usa chaves e valores que são ambas strings. No segundo, 
as chaves são strings, mas os valores são inteiros. A disposição inversa (teclas → números, valores → strings) também é possível, 
bem como a combinação número-número.

A lista de pares é rodeada por chavetas, enquanto os pares em si são separados por vírgulas, 
e as chaves e valores por dois pontos.

O primeiro dos nossos dicionários é um dicionário inglês-francês muito simples. O segundo - uma diretoria 
telefónica muito pequena.

Os dicionários vazios são construídos por um par vazio de chavetas (Chavetas são as chaves que 
criam a estrutura do dicionário) - nada de invulgar.


O dicionário como um todo pode ser impresso com uma única invocação print() . O trecho pode produzir o seguinte output:

  {'dog': 'chien', 'horse': 'cheval', 'cat': 'chat'} # saída do dicionário: dictionary
  {'Suzy': 5557654321, 'boss': 5551234567} # saida do dicionário: phone_numbers
  {} # saída do dicionário: empty_dictionary



Notou alguma coisa surpreendente? A ordem dos pares impressos é 
diferente do que na atribuição inicial. O que é que isso significa?

Em primeiro lugar, é uma confirmação de que os dicionários não são listas - não preservam a ordem dos seus dados, 
uma vez que a ordem não tem qualquer significado (ao contrário do que acontece 
nos dicionários de papel reais). A ordem em que um dicionário armazena os seus dados 
está completamente fora do seu controle, e das suas expectativas. Isso é normal.

  NOTA
  
    Em Python 3.6x os dicionários tornaram-se coleções ordenadas por defeito. Os seus 
    resultados podem variar dependendo da versão Python que estiver a utilizar.



-------------------------------
Como usar um dicionário?
-------------------------------

Se quiser obter algum dos valores, tem de entregar um key-value válido:

  print(dictionary['cat'])
  print(phone_numbers['Suzy'])


A obtenção do valor de um dicionário assemelha-se a uma indexação, 
especialmente graças aos parêntesis retos que rodeiam o valor da chave.

Nota:

    se a chave for uma string, é necessário especificá-la como uma string;
    as chaves são sensíveis a maiúsculas e minúsculas: 'Suzy' é algo diferente de 'suzy'.


Vamos dar uma olhada nas estruturas de dicionário abaixo:

  dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}
  phone_numbers = {'boss' : 5551234567, 'Suzy' : 22657854310}
  student_dictionary = {1: 'Alex, '2: 'Eduardo', 3: 'Weverton'}

  # Print the values here.
  print(dictionary['dog']) # imprime o valor: "chien" do dicionário: dictionary
  print(phone_numbers['boss']) # imprime o valor: 5551234567 do dicionário: phone_numbers
  print(student_dictionary[2]) # imprime o valor: 'Eduardo' do dicionário: student_dictionary


E agora a notícia mais importante: NÃO SE DEVE USAR UMA CHAVE INEXISTENTE. Tentar algo assim:

  print(phone_numbers['president'])

causará um erro de runtime.



Felizmente, há uma maneira simples de evitar tal situação. O operador: in , juntamente com 
o seu companheiro: not in, podem salvar esta situação.

O seguinte código procura com segurança algumas palavras francesas:

  dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}
  words = ['cat', 'lion', 'horse']

  for word in words:
      if word in dictionary:
          print(word, "->", dictionary[word])
      else:
          print(word, "is not in dictionary")



A saída do código é o seguinte:

  cat -> chat
  lion is not in dictionary
  horse -> cheval


NOTA

  Quando se escreve uma expressão grande ou longa, pode ser uma boa ideia mantê-la verticalmente alinhada. É assim que pode tornar o seu código mais legível e mais fácil de programar, por exemplo
  # Example 1:
  dictionary = {
                "cat": "chat",
                "dog": "chien",
                "horse": "cheval"
               }

  # Example 2:
  phone_numbers = {'boss': 5551234567,
                   'Suzy': 22657854310
                  }


Tais formas de formatação de código são chamadas hanging indents (indentações penduradas).


-----------------------------------
Como usar um dicionário: o keys()
-----------------------------------

Os dicionários podem ser consultados usando o loop for , como listas ou tuples?

Não e sim.

Não, porque um dicionário não é um tipo de sequência - o loop for é inútil com ele.

Sim, porque existem ferramentas simples e muito eficazes que podem adaptar 
qualquer dicionário aos: for, requisitos do loop (por outras palavras, construindo um link intermediário entre 
o dicionário e uma entidade de sequência temporária).

O primeiro deles é um método chamado: keys(), possuído por cada dicionário. O método devolve 
um objeto iterável que consiste em todas as chaves recolhidas dentro do dicionário. Ter um grupo 
de chaves permite-lhe aceder a todo o dicionário de uma forma fácil e prática.

Tal como aqui:

  dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

  for key in dictionary.keys():
      print(key, "->", dictionary[key]


A saída do código é a seguinte:

  horse -> cheval
  dog -> chien
  cat -> chat



----------------------------
O método sorted()
----------------------------

Quer que a saída seja ordenada? Apenas enriqueça o loop for , para obter tal forma:

  for key in sorted(dictionary.keys()):


A função sorted() fará o seu melhor - o output irá ficar assim:

  cat -> chat
  dog -> chien
  horse -> cheval



----------------------------------------------------------
Como usar um dicionário: Os métodos items() e values()
----------------------------------------------------------

Outra forma é baseada na utilização de um método de dicionário chamado: items(). O método devolve tuples (este é 
o primeiro exemplo onde os tuples são algo mais do que apenas um exemplo de si mesmos) onde cada tuple é um par: key-value.

É assim que funciona:

  ex1:

    colors = {
      "white": (255, 255, 255),
      "grey": (128, 128, 128),
      "red": (255, 0, 0),
      "green": (0, 128, 0)
      }

    for col, rgb in colors.items():
        print(col, ":", rgb)


  ex2:
    
    dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

    for english, french in dictionary.items():
        print(english, "->", french)


Note-se a forma como o tuple foi utilizado como uma for variável de loop.

O exemplo imprime:

  cat -> chat
  dog -> chien
  horse -> cheval



Há também um método chamado: values(), que funciona de forma semelhante a keys(), mas devolve valores.

Aqui está um exemplo simples:

  dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

  for french in dictionary.values():
      print(french)


Como o dicionário não consegue encontrar automaticamente uma chave para um determinado valor, 
o papel deste método é bastante limitado.

Este é o output esperado:
  
  cheval
  chien
  chat


------------------------------------------------------------
Como utilizar um dicionário: modificar e adicionar valores
------------------------------------------------------------

Atribuir um novo valor a uma chave existente é simples - visto os dicionários serem 
totalmente mutáveis, não há obstáculos para os modificar.

Vamos substituir o valor: "chat" com: "minou", o que não é muito preciso, 
mas funcionará bem com o nosso exemplo.

  Veja:

    dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

    dictionary['cat'] = 'minou'
    print(dictionary)


  A saída é:
    
    {'cat': 'minou', 'dog': 'chien', 'horse': 'cheval'}


--------------------------
Adicionar uma nova chave
--------------------------

Adicionar um novo par key-value a um dicionário é tão simples como alterar um valor - basta atribuir 
um valor a uma nova chave, previamente inexistente.

  Nota: este é um comportamento muito diferente em relação às listas, que não 
  permitem atribuir valores a índices inexistentes.


Vamos adicionar um novo par de palavras ao dicionário - um pouco estranho, mas ainda assim válido:

  dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

  dictionary['swan'] = 'cygne'
  print(dictionary)


A saída do exemplo:

  {'cat': 'chat', 'dog': 'chien', 'horse': 'cheval', 'swan': 'cygne'}



---------------
DICA EXTRA
---------------

Também pode inserir um item num dicionário utilizando o método update() , por exemplo:

  dictionary = {"cat": "chat", 
                "dog": "chien", 
                "horse": "cheval"
               }

  dictionary.update({"duck": "canard"})
  print(dictionary)


--------------------
Remover uma chave
--------------------

Consegue adivinhar como se remove uma chave de um dicionário?

  Nota: remover uma chave causará sempre a remoção do valor associado. Valores não podem existir sem as suas chaves.


Isto é feito com a instrução: del.

Aqui está o exemplo:

  dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

  del dictionary['dog']
  print(dictionary)


  Nota: a remoção de uma chave não existente causa um erro.

A saída do exemplo:

  {'cat': 'chat', 'horse': 'cheval'}


EXTRA

Para remover o último item num dicionário, pode-se utilizar o método popitem():

  dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

  dictionary.popitem()
  print(dictionary)    # outputs: {'cat': 'chat', 'dog': 'chien'}


  OBS: Nas versões mais antigas do Python, ou seja, antes do 3.6.7, o método: popitem() remove 
  um item aleatório de um dicionário.



