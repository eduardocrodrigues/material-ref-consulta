#######################################
#
#    Aprendendo a formatar strings
#
########################################



print()
print()

print('f"texto qualquer {inserirVariável}" - formatação de string do tipo casting, usado dentro das strings')
print('exemplo: ')
nome = 'Eduardo'
string = f"o meu nome é: {nome}"
print(string)
print()
print()

print('%() - especifica os valores para a(s) formatações dentro da(s) string(s) e a ordem dos valores inseridos aqui será')
print('inserido na mesma ordem dentro da(s) formatações na(s) string(s)')
string = 'meu nome é %s, tenho %d anos e tenho %f de grana no bolso' %('Eduardo', 31, 300.5)
print(string)
print()
print()

print('%s - usado dentro de strings para especificar strings.')
print('exemplo: ')
string = 'o meu nome é %s e sou formado em %s' %('Eduardo', 'Técnico de Informática')
print(string)
print()
print()

print('%d - usado dentro de strings para especificar números decimais.')
print('exemplo: ')
string = 'alguns dos números decimais são: %d, %d e %d' %(30, 5, 19)
print(string)
print()
print()

print('%f - usado dentro de strings para especificar números de ponto flutuante.')
print('exemplo: ')
string = 'os números %f e %f são exemplos de números de ponto flutuante' %(4.5, 0.2)
print(string)
print()
print()

print('%e - usado dentro de strings para especificar potênciação (n ** n) no formato de notação científica.')
print('exemplo:')
string = 'resultado: %e' %(4**3)
print(string)
print()
print()


# %e - especificação para números com notação científica.

# %x - especificação para números hexadecimais (base 16).
print()
print('-'*50)
print('Formatação de string usando o método: .format() ')
print('-'*50)
print()
print()

print('dois exemplos comuns de uso do método .format()')
print('ex1')
print("{0} {1}".format("Alô", "Mundo"))
print()
print('ex2')
print("{0} x {1} R${2}".format("5", "Maça", 1.20))
print()

print('uso do mesmo parâmetro mais de uma vez')
print('{0} {1} {0}'.format("-", "x"))
print()

print('Alteração da ordem de utilização dos parâmetros')
print('{1} {0}'.format("primeiro", "segundo"))
print()

print('especificando a LARGURA DE CARACTERES DE CADA PARÂMETRO usando o simbolo de dois pontos (:)')
print('A estrutura {0:10} significa: SUBSTITUA o primeiro parâmetro COM UMA')
print('LARGURA DE 10 CARACTERES. Se a quantidade de caracteres do primeiro parâmetro ')
print('for MENOR QUE O TAMANHO INFORMADO, espaços em branco serão utilizados para ')
print('completar as posições que faltam.')
print('ex1:')
print('{0:10} {1}'.format("123", "456")) # definindo a largura de somente um parâmetro...
print()
print('ex2:')
print('{0:10} {0:6}'.format("123", "456")) # definindo a largura dos dois parâmetros...
print()
print('ex3:')
print('x{0:10}x'.format("123"))
print()
print('Se a quantidade de caracteres do parâmetro for MAIOR QUE O TAMANHO especificado na estrutura: {0:6}, será impresso ')
print('todos os caracteres do parâmetro')
print('ex1:')
print('x{0:10}x'.format("12345678912345"))
print()

print('Podemos também especificar se queremos os espaços adicionais á esquerda ou a direita do valor,')
print('utilizando os simbolos de maior (>) e menor (<) logo depois dos dois pontos (:)')
print('ex1: ')
print('x{0:<10}x'.format("123"))
print()
print('ex2: ')
print('x{0:>10}x'.format("123"))
print()

print('Se quisermos o valor entre os espaços, de forma a centralizá-lo, podemos utilizar o circunflexo (^) ')
print('ex1: ')
print('x{0:10}x'.format("123"))
print()

print('Se quisermos outro caractere no lugar dos espaços, podemos especificá-lo logo após os dois pontos (:)')
print('ex1: ')
print('x{0:.<10}x'.format("123"))
print()
print('ex2: ')
print('x{0:!>10}x'.format("123"))
print()

print('Inserindo outro caractere no lugar dos espaços, e centralizando o dado do parametro dentro da string. ')
print('ex1: ')
print('x{0:*^10}'.format("123"))
print()

print('Se o parâmetro for uma lista, podemos ESPECIFICAR o INDICE DE UMA LISTA inserida no método: .format(), dentro da estrutura de formatação')
print('  OBS: na estrutura de formatação, o NÚMERO que está DENTRO DAS CHAVES e ANTES DO INDICE DE LISTA, mostrado pela seta no exemplo abaixo:')
print()
print('      |       ')
print('      v       ')
print('    "{0[0]}"  ')
print()
print('  representa UMA LISTA INSERIDA NO PARÂMETRO do método: .format()')
print('  Na estrutura de formatação, o NÚMERO que está DENTRO DOS COLCHETES, mostrado pela seta no exemplo abaixo:')
print()
print('        |     ')
print('        v     ')
print('    "{0[0]}"  ')
print()
print('  representa o INDICE DA LISTA INSERIDA NO PARÂMETRO DO MÉTODO: .format()')
print('  Ou seja, no ex1, o PRIMEIRO INDICE DO MÉTODO: .format() É A LISTA: ["123", "456"].') 
print('  No ex2, o PRIMEIRO INDICE DO MÉTODO: .format() é a lista: ["123", "421"], e o segundo indice é a lista: ["789", "321"]')
print('ex1: ')
print('{0[0]} {0[1]}'.format(["123", "456"]))
print()
print('ex2: ')
print('{0[0]} {1[0]}'.format(["123", "421"], ["789", "321"]))
print()

print('Se o parâmetro for um dicionário, podemos ESPECIFICAR o INDICE DE UM DICIONÁRIO inserido no método: .format(), dentro da estrutura de formatação')
print('  OBS: na estrutura de formatação, o NÚMERO que está DENTRO DAS CHAVES e ANTES DO INDICE DO DICIONÁRIO, mostrado pela seta no exemplo abaixo:')
print()
print('      |          ')
print('      v          ')
print('    "{0[nome]}"  ')
print()
print('  representa UM DICIONÁRIO INSERIDO NO PARÂMETRO do método: .format()')
print('  Na estrutura de formatação, o NOME que está DENTRO DOS COLCHETES, mostrado pela seta no exemplo abaixo:')
print()
print('         |       ')
print('         v       ')
print('    "{0[nome]}"  ')
print()
print('  representa o INDICE DO DICIONÁRIO INSERIDO NO PARÂMETRO DO MÉTODO: .format()')
print('  Ou seja, no ex1, o PRIMEIRO INDICE DO MÉTODO: .format() é o dicionário: {"telefone": 572, "nome": "Maria"}.') 
print('  No ex2, o PRIMEIRO INDICE DO MÉTODO: .format() é o dicionário: {"telefone": 572, "nome": "Maria"}, e o segundo indice do método: .format(), é o dicionário: {"idade": 31, "sexo": "Masculino"}')
print('ex1: ')
print("{0[nome]} {0[telefone]}".format({"telefone": 572, "nome": "Maria"}))
print()
print('ex2: ')
print('{0[nome]} {1[idade]}'.format({"telefone": 572, "nome": "Maria"}, {"idade": 31, "sexo": "Masculino"}))
print('  OBS: repare que dentro da string escrevemos: nome e telefone entre os colchetes, mas SEM ASPAS, ESSA SINTAXE É USADA SOMENTE COM O MÉTODO: .format()')





print('-'*50)
print('Formatação para quebra de string configurada dentro da string')
print('-'*50)
print('\\n - usado dentro da string para "quebrar a string" para continuar escrevendo na linha seguinte.')
print('exemplo: ')
string = 'uma linha qualquer escrita para aprender \n sobre quebra de string com o caractere barra invertida'
print(string) # imprime a string
print()
print()

print('%20s\\n - preenche uma string com 20 caracteres em branco e exibe um caractere de nova linha.')
print('exemplo1: ')
string = '%20s\n' %('escrito por Eduardo')
print(string)
# OBS: caso vc utilize essa nomenclatura em uma string que contenha caracteres, o python primeiro
# vai se comportar analizando EM QUE LUGAR DA STRING a nomenclatura FOI INSERIDA (ou seja, ele vai
# identificar EM QUE POSIÇÃO na string (ou seja, em que ÍNDICE) da FILA DE CARACTERES a nomenclatura FOI INSERIDA),
# depois o python faz a contagem DO PRIMEIRO CARACTERE DA STRING até o CARACTERE EM QUE
# A NOMENCLATURA FOI INSERIDA NA STRING e analiza a string da seguinte forma:
# SE A QUANTIDADE DE CARACTERES (contando do primeiro caractere da string até o índice em que a nomenclatura foi inserida)
# FOR MENOR QUE O NÚMERO INSERIDO NA NOMENCLATURA (que no caso do exemplo2, é o número: 30), preencha DESDE O COMEÇO DA STRING
# COM CARACTERES VAZIOS. O que acontece é que o texto definido entre começo da string até a nomenclatura vai 
# SOBREPOR ALGUNS DOS ESPAÇOS VAZIOS DENTRO DA STRING, e o restante da string será preenchido com caracteres vazios.
print('exemplo2:')
string = 'texto qualquer %30s\n exibido na tela' %('em Python')
print(string)
print()





print()
print('-'*50)
print('Formatação de números usando o método: .format() ')
print('-'*50)
print()
print()

print('formatação de números com o método: .format() funciona de forma bem parecida á como funciona com strings')
print()

print('exemplo normal de formatação com número')
print('ex: ')
print('{0}'.format(32))
print()

print('exemplo de formatação com número e com caracteres vazios na string')
print('ex: ')
print('{0:5}'.format(123))
print()


print('exemplo de formatação com número e com caracteres de número zero na string')
print('o número zero representado pela seta abaixo, representa o indice zero da string')
print('  OBS: se vc inserir um valor diferente de zero, vai dar erro !!!, tem que ser sempre zero ali !!!')
print()
print('      |       ')
print('      v       ')
print('    "{0:07}"  ')
print()
print('o número zero representado pela seta abaixo, representa o CARACTERE QUE SERÁ PREENCHIDO NA STRING.')
print()
print('        |       ')
print('        v       ')
print('    "{0:07}"    ')
print()
print('  OBS: se o tamanho de caracteres (o tamanho de caracteres na formatação é definido pelos caracteres apotados pelas duas setas abaixo: ')
print('  ')
print()
print('      |  |      ')
print('      v  v      ')
print('    "{0:07}"    ')
print()
print('   para a string for MAIOR QUE A QUANTIDADE DE CARACTERES DO DADO INSERIDO na formatação (esse dado inserido na formatação é')
print('  o dado inserido no parâmetro do método: .format()), o valor será impresso com a largura determinada pela formatação e')
print('  com zeros á esquerda completando o tamanho da string')
print()
print('vamos a dois exemplo prático do que foi explicado acima:')
print('ex1: ')
print('{0:07}'.format(123))
print()
print('ex2:')
print('{0:05}'.format(5))
print()


print('podemos também fazer o preenchimento de caracteres a esquerda da string (se o dado for menor que o tamanho da formatação de string, é claro) usando ')
print('o caractere (=)')
print(' OBS: a diferença é que o caractere de preenchimento de string tem que ficar entre o sinal de dois pontos (:) e o caractere sinal de igual (=) )')
print(' veja o exemplo teórico abaixo')
print()
print('    exemplo mostrando o caractere dois pontos (:) e o caractere sinal de igual (=):')
print()
print('       | |       ')
print('       v v       ')
print('    "{0:*=7}"    ')
print()
print('    exemplo mostrando o caractere que vai preencher a string:')
print()
print('        |        ')
print('        v        ')
print('    "{0:*=7}"    ')
print()
print('exemplo prático de como funciona a explicação acima:')
print('{0:*=7}'.format(32))
print()


print('Podemos também especificar se queremos os espaços adicionais á esquerda ou a direita do valor,')
print('utilizando o caractere que queremos preencher a string (que nesse nosso caso, é o caractere de estrelinha (*) ), entre ')
print('o caractere de dois pontos (:) e o caractere sinal de menor (<), como mostra a seta abaixo:')
print()
print('        |        ')
print('        v        ')
print('    "{0:*<7}"    ')
print()
print('exemplo preenchendo a string a ESQUERDA do valor')
print('ex: ')
print('x{0:*<10}x'.format(123))
print()
print('exemplo preenchendo a string a DIREITA do valor')
print('ex: ')
print('x{0:*>10}x'.format(123))
print()


print('podemos tbm centralizar o dado na string (caractere usado para centralizar o dado mostrado pela seta no exemplo abaixo: )')
print()
print('         |       ')
print('         v       ')
print('    "{0:*^7}"    ')
print()
print('preenchendo as laterais dentro da string (que nesse nosso caso, preenchendo com o caractere de estrelinha (*) ), mostrado pela seta no exemplo abaixo: ')
print()
print('        |        ')
print('        v        ')
print('    "{0:*^7}"    ')
print()
print('exemplo CENTRALIZANDO O DADO dentro da string e PREENCHENDO AS LATERAIS DENTRO DA STRING com o caractere de estrelinha')
print('{0:*^7}'.format(123))
print()


print('Podemos tbm fazer a separação de milhar')
print('primeiro criamos a formatação de quantos caracteres (nesse caso, CARACTERES VAZIOS) queremos que a string tenha.')
print('como mostra as setas no exemplo abaixo, a string terá 10 caracteres')
print()
print('      |  |        ')
print('      v  v        ')
print('    "{0:10,}"     ')
print()
print('a vírgula logo ao lado do número 10, ')
print()
print('          |        ')
print('          v        ')
print('    "{0:10,}"      ')
print()
print('indica que queremos que o número seja formatado com notação de milhar (ex: 1,000, 2,456, 3,999, etc...')
print('ex: ')
print('{0:10,}'.format(7532))
print()


print('Podemos tbm usar o ponto para indicar a QUANTIDADE DE CASAS APÓS A VÍRGULA')
print('primeiro criamos a formatação de quantos caracteres (nesse caso, CARACTERES VAZIOS) queremos que a string tenha.')
print('como mostra as setas no exemplo abaixo, a string terá 10 caracteres')
print()
print('      |  |        ')
print('      v  v        ')
print('    "{0:10.5f}"   ')
print()
print('o PONTO ao lado do número 10, indica que queremos que O NÚMERO SEJA FORMATADO com NOTAÇÃO de QUANTIDADES DE CASAS DECIMAIS APÓS A VÍRGULA.')
print()
print('          |         ')
print('          v         ')
print('    "{0:10.5f}"     ')
print()
print('o número 5 (ao lado do sinal do PONTO), indica a QUANTIDADE DE CASAS DECIMAIS QUE QUEREMOS QUE SEJA EXIBIDA NA FORMATAÇÃO.')
print()
print('           |         ')
print('           v         ')
print('    "{0:10.5f}"      ')
print()
print('a letra f (ao lado do número 5), significa: float.')
print()
print('            |        ')
print('            v        ')
print('    "{0:10.5f}"      ')
print()
print('ex: ')
print('{0:10.5f}'.format(1500.31))
print()


print('Podemos tbm usar tanto a VÍRGULA (para GERAR A FORMATAÇÃO DO NÚMERO EM MILHAR) junto com a NOTAÇÃO')
print('DE EXIBIÇÃO DAS CASAS DECIMAIS do número (usando: .5f), como mostra as setas no exemplo abaixo: ')
print()
print('          ||||        ')
print('          vvvv        ')
print('    "{0:10,.5f}"   ')
print()
print('para EXIBIRMOS A FORMATAÇÃO DO NÚMERO COM NOTAÇÃO DE MILHAR e COM UMA DETERMINADA QUANTIDADE DE CASAS DECIMAIS')
print('ex: ')
print('{0:10,.5f}'.format(1500.31))
print()


print('podemos tbm permitir forçar a impressão de sinais ( positivos (+) ou negativos (-) ) ou apenas reservar espaço para uma impressão eventual')
print('o sinal de positivo (+) ou negativo (-), deve ser inserido entre o caractere dois pontos (:) e o número no final da chave, ')
print('como mostra a seta no exemplo abaixo: ')
print()
print('        |       |         ')
print('        v       v         ')
print('    "{0:+10} {0:-10}"     ')
print()
print('vamos ao exemplo na prática:')
print('ex1: ')
print('{0:+10} {0:-10}'.format(5, -6))
print()
print('se o valor inserido no parâmetro do método: .format() for positivo (como por exemplo, o número: 5), como mostra a seta abaixo:')
print()
print('                     |         ')
print('                     v         ')
print('    "{0:-10}".format(5)        ')
print()
print('e na formatação a formatação for configurada com o sinal negativo, como mostra a seta abaixo:')
print()
print('        |                ')
print('        v                ')
print('    "{0:-10}".format(5)  ')
print()
print('não será exibido nenhum sinal ao número')
print()
print('vamos ao exemplo')
print('ex2: ')
print('{0:-10} {0: 10}'.format(5, -6)) # por mais que a formatação está configurada com o sinal negativo, NÃO EXIBIRÁ NENHUM SINAL AO NÚMERO: 5, pq a formatação tá configurada em negativo, e o número tá positivo
print()
print('mas, se o valor inserido no parâmetro do método: .format() for NEGATIVO (como por exemplo, o número: -6), como mostra a seta abaixo:')
print()
print('                      |     ')
print('                      v     ')
print('    "{0:+10}".format(-6)    ')
print()
print('e na formatação a formatação for configurada com o sinal POSITIVO, como mostra a seta abaixo:')
print()
print('        |                   ')
print('        v                   ')
print('    "{0:+10}".format(-6)    ')
print()
print('o sina NEGATIVO È IMPRIMIDO na formatação')
print('ex: ')
print("{0:+10}".format(-6))
print()


print('Quando definimos um ESPAÇO EM BRANCO entre o sinal de dois pontos (:) e o número a direita dentro da chave na formatação (que no nosso caso,')
print(' é o número: 10), como mostra as setas abaixo:')
print()
print('        |                    ')
print('        v                    ')
print('    "{0: 10}".format(5, -6)  ')
print()
print('tbm não será exibido nenhum sinal ao número')
print('ex: ')
print('{0: 10} {0: 10}'.format(5, -6)) 
print()


print()
print('-'*50)
print('Formatação de números com FORMATOS NÚMÉRICOS para números inteiros, usando o método: .format() ')
print('-'*50)
print()

print('Quando trabalhamos com formatos númericos, devemos INDICAR COM UMA LETRA o FORMATO QUE DEVE SER ADOTADO para a IMPRESSÃO.')
print('Essa letra informa como devemos exibir um número. A lista completa de formatos numéricos é apresentada nas tabelas: 7.1 e 7.2.')
print()
print()
print('                         Tabela 7.1 - Formatação de Números Inteiros                      ')
print('-----------------------------------------------------------------------------------------|')
print('| Código |           Descrição                    |     Exemplo (usando o número: 45)    |')
print('-----------------------------------------------------------------------------------------|')
print('|    b   | Binário                                |           101101                     |')
print('|    c   | Caractere                              |              -                       |')
print('|    d   | Base 10                                |             45                       |')
print('|    n   | Base 10 local                          |             45                       |')
print('|    o   | Octal                                  |             55                       |')
print('|    x   | Hexadecimal com letras minúsculas      |             2d                       |')
print('|    X   | Hexadecimal com letras maiúsculas      |             2D                       |')
print('-'*90)
print()
print()

print('-'*50)
print('Exemplos usando os códigos da tabela 7.1')
print('-'*50)
print('todos os caracteres que representam um código da tabela acima deve ser inserido na formatação da string, DEPOIS DO SINAL de ')
print('dois pontos (:), como mostra a seta no exemplo abaixo:')
print()
print('       |                    ')
print('       v                    ')
print('     {:b}.format(45)        ')
print()
print()

print('O formato b imprime o número utilizando o SISTEMA BINÁRIO, ou seja, de base 2, com apenas 0 e 1 como digitos.')
print('ex: ')
print('{:b}'.format(5678))
print()

print('O formato o imprime o número utilizando o SISTEMA OCTAL, ou seja, de base 8, com digitos de 0 a 7.')
print('ex: ')
print('{:o}'.format(5678))
print()

print('O formato c imprime o número CONVERTENDO-O EM CARACTERE, utilizando A TABELA UNICODE.')
print('ex: ')
print('{:c}'.format(65))
print()

print('Tanto o formato x (xis minúsculo) quanto o formato X (xis maiúsculo) imprimem os números utilizando')
print('o sistema hexadecimal, de base 16. A diferença é que x (xis minúsculo) utiliza letras')
print('minúsculas e X (xis maiúsculo) utiliza letras maiúsculas')
print('ex: ')
print('{:x}'.format(5678))
print()
print('ex: ')
print('{:X}'.format(5678))
print()

print('Os formatos d e n são parecidos. O formato d é semelhante ao que utilizamos ao formatar os números com %d. A diferença entre')
print('o formato d e o formato n é que o formato n leva um consideração as configurações regionais da máquina do usuário. Vejamos')
print('alguns exemplos logo abaixo.')
print('ex1: ')
print('{:d}'.format(5678))
print()
print('ex2: ')
print('{:n}'.format(5678))
print()


print('Observe que, antes de configurarmos a máquina para o português do Brasil, o resultado do')
print('formato d e do formato n eram iguais. Após a configuração regional, o formato n passou a exibir os números utilizando')
print('pontos para separar os milhares. Se vc utiliza Windows, modifique "pt_BR.utf-8" para "Portuguese_Brazil" ')
print('ex3: ')
print('  OBS: essas quatro linhas abaixo, vc deve executar no editor idle-python para ver o resultado corretamente !!!!')
print('import locale') 
print('locale.setlocale(locale.LC_ALL, "pt_BR.utf-8")')
print('{:n}.format(5678)')
print('5.678')
print()
print()


print('-'*50)
print('Formatação de números com FORMATOS NÚMÉRICOS para números decimais, usando o método: .format()')
print('-'*50)
print()
print('                         Tabela 7.1 - Formatação de Números Decimais                         ')
print('--------------------------------------------------------------------------------------------|')
print('| Código |           Descrição                    |     Exemplo (usando o número: 1.345)    |')
print('--------------------------------------------------------------------------------------------|')
print('|    e   | Notação científica com e minúsculo     |           1.345000e+00                  |')
print('|    E   | Notação científica com e maiúsculo     |           1.345000E+00                  |')
print('|    f   | Decimal                                |           1345000                       |')
print('|    g   | Genérico                               |           1345                          |')
print('|    G   | Genérico                               |           1345                          |')
print('|    n   | Local                                  |           1345                          |')
print('|    %   | Percentual                             |           134.500000%                   |')
print('-'*90)
print()
print()


print('Para números decimais, temos também vários códigos. O código f já conhecemos e funciona de forma semelhante')
print('ao que utilizamos em %f. O formato n utiliza as configurações regionais para imprimir o número. Em portugues,')
print('essa configuração utiliza o ponto como separador de milhar e a virgula como separador decimal, produzindo números')
print('mais fáceis de entender. Vejamos exemplos na listagem 7.43')
print()

print('')
print('ex:')
print('{:f}'.format(1579.543))
print()

print('O formato: n utiliza as configurações regionais para imprimir o número. Em português, essa configuração')
print('utiliza o ponto como separador de milhar e a virgula como separador decimal, produzindo números mais fáceis de entender.')
print('ex1: ')
print('{:n}'.format(1579.543))
print('  OBS: essas quatro linhas abaixo, vc deve executar no editor idle-python para ver o resultado corretamente !!!!')
print('import locale') 
print('locale.setlocale(locale.LC_ALL, "pt_BR.utf-8")') # configura a formatação dos números no formato brasileiro.
print('{:n}'.format(1579.543))
print('1.579,54')
print()

print('Os formatos e (letra e minúscula) e E (letra E maiúscula) imprimem o número utilizando notação científica. Isso quer dizer')
print('que a parte decimal va ser substituida por um expoente. Por exemplo: 1004.5 em notação científica será impresso 1.0004500e+03.')
print('Para entender esse formato, devemos entender suas partes. O número á esquerda de e (letra e minúsculo) é o que')
print('chamamos de mantissa, e o número á direita, o expoente. A base é sempre 10 e, para recompor o número, multiplicamos a mantissa')
print('pela base 10 elevada ao expoente. No caso de: 1.004500e+03, teriamos:')
print()
print('           1.004500  x  10**3 = 1.004500 x 1000 = 1004.5   ')
print()
print('A vantagem de utilizar notação cientifica é poder representar números muito grandes, ou muito pequenos, em pouco espaço. A diferença')
print('entre o formato e (letra e minúscula) e E (letra E maiúscula) é que queremos exibir o e (letra e minúscula) que separa ')
print('a mantissa do expoente, ou seja, um e (letra e minúscula) ou um E (letra E maiúscula).')
print('ex1: ')
print('{:8e}'.format(3.141592653589793))
print()
print('ex2: ')
print('{:8E}'.format(3.141592653589793))
print()

print('Os formatos g e G são chamados de genéricos, pois, dependendo do número, eles são exibidos como no') 
print('formato f ou como no formato e (letra e minúscula) e E (letra E maiúscula)')
print('ex1: ')
print('{:8g}'.format(3.141592653589793))
print()
print('ex2: ')
print('{:8G}'.format(3.141592653589793))
print()
print('ex1: ')
print('{:8g}'.format(3.14))
print()
print('ex2: ')
print('{:8G}'.format(3.14))
print()

print('O tipo % simplesmente multiplica o valor por 100 antes de imprimi-lo, assim, 0,05 é impresso como: 5%')
print('ex: ')
print('{:5.2%}'.format(0.05))
print()


