#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# configurando o usuário git
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#configurando o usuário git
git config --global user.name "nomeDoUsuario"

#configurando o email do git
git config --global user.email "seuemail@gmail.com"

#para ver a configuração dos valores configurados em user.name e user.email
git config --global --list

#configura o editor a ser usado no git, ex: nano, vi, sublime text...
git config --global core.editor nomeDoEditor

#para inicializar um repositorio como parte do ecosistema git, entre
#na pasta á qual vc deseja que seja um repositorio git, e digite...
git init

OBS: Normalmente vc configura uma pasta vazia como repositório git, mas vc pode 
definir como repositório uma pasta do computador que já contenha arquivos.


#Nota:essa anotação é somente a nivel de conhecimeto.
#a pasta .git mostra as pastas referentes a:
-HEAD - branch padão que ele tá.
-branches - branchs existentes no projeto.
-config - configuração do repositório git.
-description - 
-hooks - gatilhos para fazer certas ações durante seu o projeto
-info - 
-objects - 
-refs - referencias de cada arquivo dentro do git


#=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# manipulando arquivos no git
#=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#verifica se um arquivo foi restreado, ou seja, se foi: modificado, inserido ou removido.
git status

#adiciona o(s) arquivo(s) para a stage area
git add nome_do_arquivo

#adiciona todos os arquivos para a stage area (caso queira adicionar todos de uma só vez)
git add --all

#para dar commit nos arquivos da stage area (último estagio antes de preparar para 
#enviar os arquivos para o gitHub)
git commit -m "insira um texto referente ao que vc fez nesse commit"

#mostra uma lista dos arquivos que não estão na stage area e que podem ser apagados...
git clean -n

#para deletar arquivos que foram adicionados ao repositório (e que não 
esteja na stage area),utilize...
git clean -f
 
#para deletar somente alguns dos arquivos que foram adicionados ao repositório, utilize...
git clean -i

OBS: será exibido um menu de opções sobre como vc deseja remover esses arquivos, onde
a letra colorida da opção representa como selecionar a opção, caso escolha a 
remoção por numeros (select by numbers), será exibida uma lista com os arquivos 
á serem removidos, selecione pelo numero qual arquivo vc deseja remover, os arquivos 
selecionados para remoção ficarão com o sinal de asterisco, e para remove-los, pressione a
tecla c (c da opção de clean) e pressione enter, pronto, os arquivos serão apagados.


#=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# usando o gitignore
#=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#para fazer o git ignorar um ou vários arquivos dentro do repositório, crie um arquivo
#chamado .gitignore e insira dentro dele os arquivos que vc quer que o git ignore.

OBS: vc pode fazer com que o git ignore vários arquivos de uma determinada extensão, por 
exemplo: *.py, ignorará todos os arquivos com extensão .py.
OBS2: se um arquivo já foi rastreado/trackeado, ou seja, já está na stage área, e vc decide 
inserir esse arquivo no .gitignore, então o git não consegue ignorar o arquivo. Para que 
o git consiga ignora-lo, é necessário retirar o arquivo da stage area para aí sim o git conseguir ignora-lo.



#=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#Comandos git log
#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=--=

#exibe o histórico de commits
git log

#exibe o histórico com um pouco mais de detalhes
git log --stat

#exibe de qual branch para qual branch foram enviados os commits
git log --decorate 

#exibe os commits somente feitos por um determinado autor.
git log --author="nomeDoAuthor"

#mostra em ordem alfabética qual foram os autores, quantos commits fizeram,
#e quais foram os commits feitos por eles. 
git shortlog

#mostra somente o nome da pessoa e a quantidade de commits feito pela pessoa.
git shortlog -sn

#mostra os logs de forma gráfica
git log --graph

#exibe informações sobre o que aconteceu em um commit
OBS:o numero da hash do commit é parecido com: 6tg767gghh74jh45jh6h3jh2
git show numeroDaHash


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=
#Comando git diff
#=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#exibe no terminal o que foi alterado no(s) arquivo(s)
OBS:utilize SEMPRE o git diff para saber o que foi alterado no(s)
arquivo(s) e ter certeza se é assim que vc deseja que os arquivos estejam, 
antes de fazer o commit do(s) arquivo(s).
git diff

#para saber qual foi a alteração (o que foi feito nesse commit)
git diff numeracaoDoCommitAqui

#para saber qual foi a alteração feita entre os commits
git diff numeracaoDoCommitAqui numeracaoDoOutroCommitAqui

#exibe somente o nome do(s) arquivo(s) que foram modificados.
git diff --name-only


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#desfazer alterações de arquivos com git checkout 
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#caso tenha feito uma alteração em um arquivo e queira desfazer
#essa alteração, utilize...
OBS:retorna o arquivo para antes da alteração/edição
git checkout nomeDoArquivo

#acessa qualquer um dos commits anteriores
git checkout numeroHashDoCommitAnteriorDesejado

OBS:isso é muito usado para saber onde um bug foi introduzido no programa.
OBS2: quando vc acessa um dos commits anteriores, se vc der git log (para ver 
todos os outros commits), vc só verá os commits efetuados até o commit em que vc está,
para ter acesso novamente a todos os commits já efetuados 
utilize git checkout nomeDoBranchEmQueVcEstava


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#desfazendo alterações com: git reset 
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#retira o(s) arquivo(s) da stage area (volta para um estágio anterior ao git add)
git reset HEAD nomeDoArquivo

#caso tenha feito o último commit de forma errada e queira voltar ao 
#commit sem perder as alteraçoes, utilize...
git reset HEAD~1 

#caso queira desfazer o último commit feito e desfazer todas as 
#alterações (caso tenha feito as alterações no arquivo 
#de forma toda errada), utilize...
git reset --hard HEAD~1

OBS:se uma vez vc fizer um commit e for enviado ao servidor, NÃO TENTE 
DESFAZER ESSE COMMIT,NÃO TENTE REMOVER ESSE COMMIT DO SERVIDOR, e o motivo
disso é que caso tenha uma ou mais pessoas seguindo o seu repositório, o 
repositório delas, o git delas ficaria todo perdido quando vc fizer a 
remoção desse arquivo, assim, caso vc tenha subido um arquivo errado, um
commit errado, baixa esse commit, faça a alteração e suba ao GitHub novamente.


#caso tenha alterado varios arquivos que não devia, e vc queira voltar para
#o estágio anterior ao modificado, utilize...
git reset --hard

OBS: O git reset --hard só funciona se os arquivos já estiverem na stage area.
OBS2:a diferença do git reset --hard para o git reset --hard numeroDaHashDoCommit é 
que o git reset --hard funciona SOMENTE com arquivos, e o git reset --hard numeroDaHashDoCommit funciona
SOMENTE para commits.

#caso vc tenha feito um commit de forma errada e queira voltar para um 
#commit anterior ou para qualquer outro dos commits anteriores, utilize...
git reset --soft numeroDoCommit

OBS:o comando acima entra no commit desejado (removendo o(s) commit(s) que 
estão após o selecionado), só que os arquivos do commit selecionado ficam 
configurado como estando em stage area, ou seja, um passo anterior ao commit feito 
nessa versão do commit selecionado (os arquivos que foram modificados na 
stage area tbm estarão habilitados com essas modificações na stage area). é só 
dar um git status para verificar como está configurado.

#faz quase o mesmo que o comando acima, a diferença é que os arquivos ficam
#configurados para antes da stage area, ou seja, untracked (não trackeado), e 
#caso vc tenha modificado o(s) arquivo(s) antes de ter enviado para a stage area,
#estes arquivos tbm estarão habilitados com as modificações
git reset --mixed numeroDaHashDoCommit

#faz quase o mesmo que os comandos acima, a diferença é que esse comando
#remove todas as modificações da stage area e remove todas as modificações 
#feitas antes da stage area (quando os arquivos estão como  untracked) 
git reset --hard numeroDaHashDoCommit


#NOTA_IMPORTANTE:Cuidado ao utilizar o git reset, pq, caso vc tenha feito um
commit e vc já tenha enviado esse commit ao servidor (GitHub) e vc resetou com
git reset --hard, ou seja,  matou o commit e quer subir de novo com o novo
commit, ao dar git push (para subir o novo commit ao GitHub), o GitHub vai 
acusar: olha, tem uma diferença entre o que vc vai mandar pra mim e o que 
eu tehho, POR FAVOR BAIXE o que eu tenho (baixar com git pull). somente 
utilize git reset SOMENTE se o commit não tenha sido enviado ao 
servidor (GitHub). 
  
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#Criando um novo repositório pela linha de comando
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#siga os passos abaixo:

echo "# nomeDaPastaDoGitHub" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:eduardochagas/nomeDaPastaDoGitHub
git push -u origin master


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# ou empurre ao GitHub um reporitorio (repo local, para o GitHub)  
# a partir da linha de comando
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#significa: adicione ao repositório remoto na origem desse link git@github...
#segundo comando: empurre para a origem (que é o link até o repositório do 
#GitHub, ou seja, git@github...) os arquivos da branch local chamado master.
git remote add origin git@github.com:eduardochagas/nomeDaPastaDoGitHub
git push -u origin master

#mostra a origem (do repositorio remoto)
git remote

#mostra a origem (do repositório remoto) e seu endereço
git remote -v


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Clonando repositorios do GitHub
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#clona todo um repositório para a sua maquina local
#caso queira dar outro nome a pasta clonada no seu 
#repositório localmente, insira o nome desejado 
#após o link do clone.
git clone git@github.com:willianjusten/github-course novoNomeDoRepositorio

OBS:a pasta que receberá o clone deve ser o seu diretório atual, lembre-se disso.
OBS2:ao acessar a pasta clonada, ela virá com todo o histórico de commits já feito
anteriormente antes da clonagem.
OBS3: se algum arquivo estiver listado no .gitignore ao fazer o clone de um repositorio
para outro LOCALMENTE, esse arquivo listado no .gitignore não será passado no 
repositório clonado.


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# enviar e receber os arquivos do GitHub
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#para ENVIAR os ARQUIVOS do repositorio local para o GitHub
git push -u origin nomeDoBranch

OBS:o -u é usado para nas para que nas próximas vezes que vc tiver que 
enviar os arquivos para o GitHub, vc só precisar de digitar: git push

#aula19
#para RECEBER os ARQUIVOS do repositorio do GitHub
git pull

OBS: caso vc dêe git pull e aparecer a frase: already up-to-date, significa que
os arquivos já são os mais recentes baixados do GitHub.


#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# usando o git tag
#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#Nota: a tag nada mais é do que uma marcação no commit especifico 
#que vc realizou

#usado para criar uma tag
git tag nomeDaTag

#usado para mostrar os nomes das tags já criadas
git tag

OBS:lembrando que as tags aparecem na aba releases, lá no GitHub, e os nomes 
das tags vc pode definir com o nome que quiser.
OBS2:caso vc queira definir um nome de uma tag para um commit diferente 
do atual, digite: git tag nomeDaTag númeroDoCommit, para saber o número
do commit, digite git log.

#apaga a tag só localmente (na máquina local)
git tag -d nomeDaTag

OBS:caso apague a tag localmente e tenha a tag no servidor, a tag do
servidor continuará lá no servidor, para apagar a tag do servidor tbm,
utilize o comando abaixo.

#apaga a tag no servidor (GitHub)
git push origin --delete nomeDaTag

#para criar uma tag anotada
OBS:para inserir uma anotação na tag, utilize o -a seguido da anotação (ex:1.0.0)
OBS2:tags anotadas podem ser inseridas mensages
OBS3:é após fazer o commit que vc define a tag utilizando o comando abaixo, (ou seja,
a tag será inserida ao último commit feito no git)
git tag -a 1.0.0 -m "nomeQualquerParaTag"

#para subir a tag no servidor (GitHub)
git push origin nomeDoBranch --tags

#apaga a tag do servidor
git push origin :tagDefinidaNoReleaseDoGitHub

OBS: caso vc dêe git pull e aparecer a frase: already up-to-date, significa que
os arquivos já são os mais recentes baixados do GitHub.


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Fazendo fork de um projeto
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#é só ir até um projeto de alguma pessoa na qual vc queira contribuir 
#no GitHub, e clicar no botão fork. O repositório dessa pessoa será 
#baixado no seu GitHub, e assim vc pode contribuir para essa pessoa.

OBS:a diferença do clone para o fork é que o clone (é uma cópia) que eu faço 
para os projetos que são meus (ou seja, eu clono um repositório do meu GitHub 
para a minha maquina local), que são do meu proprio GitHub, e o 
fork é (uma cópia) do repositório de outras pessoas para o meu repositório, 
utilizada para colaboração de projetos para outras pessoas do GitHub.


#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Criando branchs
#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#cria uma nova branch (branch significa: ramificação)
git branch nomeDaBranch

#usado para renomear a branch local (a atual em que vc está)
git branch -m novoNomeDaBranch

#usado para renomear branchs local (sem ser a atual, as que vc não está)
git branch -m nomeDaBranch novoNomeDaBranch

#usado para deletar localmente (no git) a branch no site do GitHub
git push origin --delete nomeDaBranchNoGitHub

#mostra quais são os branchs existentes (quantos branchs foram criados nesse git) e 
#qual é o branch corrente (o branch atual é sinalizado com asterisco (*) esse é o seu
#branch em que vc está!).
git branch

#cria o branch e já entra nesse branch (ao mesmo tempo)
git checkout -b nomeDoBranch

#Nota: sempre que for trocar de uma branch para outra, tenha certeza de 
comitar todos os arquivos, por que as mudanças do(s) arquivo(s) podem 
ser descartadas caso mudar de branch.

#deleta o branch (o -D tem que ser Maiúsculo)
git branch -D nomeDoBranch

#deleta a branch somente localmente, mantendo a branch remota (no GitHub)
git branch -d nomeDaBranch

OBS:caso tenha removido a branch somente localmente e ainda a mesma se 
encontra no servidor (GitHub) e vc queira essa branch novamente na sua
maquina (localmente), use: git checkout nomeDaBranchNoServidor

#lista todas as branchs remotas (lá do servidor)
git branch -r

#lista as branchs locais (do computador) e as branchs remotas (do servidor GitHub)
git branch -a

#usado para remover o branch de origem lá do servidor (GitHub).
git push origin --delete nomeDoBranch


#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Diferenças do git log e do git log --graph
#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#Nota: o git log exibe os commits na ordem cronológica em que foram feitos, ex:
#se vc fez um ou mais de um commit em uma branch (por exemplo, na branch teste1), e depois 
#vc muda de branch (por exemplo, para a branch teste2) e faz um ou mais de um commit nessa 
#branch, ao voltar para a branch teste1 e der git log, o git log exibirá 
#os commits na ordem cronológica em que foram feitos.

#Nota2: o git log --graph exibe os commits mostrando em quais ramificações (ou seja, em
#quais branchs) cada commit foram feitos (diferente do git log, o git log --graph não exibe na
#ordem cronológica, e sim pela ordem de ramificação em que foram feitos).


#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Diferenças entre o git merge e o git rebase
#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#o git merge nomeDaBranch traz os commits de uma outra branch (ex: teste2) para a branch atual em que vc está (ex: teste1) 
#mantendo o histórico de commits da branch atual em ordem cronológica (ou seja, na ordem em que foram criados/feitos),
#mesmo que os commites tenham sido feitos de forma alternada entre branchs, ao fazer o git merge, a
#branch atual que recebe os arquivos "mergeados" terá o seu histórico ordenado de forma cronológica em que os 
#commits foram feitos, a diferença é que o git merge cria um commite a mais no historico de 
#commits (veja o historico de commits com git log) dizendo que houve um merge de um determinado branch,
#para o branch atual.
OBS:o git merge é recomendado utilizar em casos de pull request, onde é de fato necessário ver que o branch
foi unido á outro branch.

#usado para trazer as alterações de um branch para o branch atual
#git merge nomeDoBranch

OBS:lembrando que vc deve já estar no branch de destino para poder
fazer o merge.


#o git rebase nomeDaBranch é mais recomendado para o caso de enquanto vc tiver trabalhando e adicionando novos commits e
#sempre atualizando com os outros branchs.


#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# usando o git stash
#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#se vc fez alteração em um ou mais arquivos na branch atual, vc não quer
#dar commit nessas alterações e vc deseja trocar de branch sem perder o 
#conteúdo alterado nessa branch atual, digite...
git stash

OBS:esse stash pega todas as suas alterações locais e leva/armazena 
em uma pilha.

#exibe a lista de pilhas do comando git stash da branch
git stash --list

#para retornar ao stash salvo (para exibir os arquivos 
#salvos na lista de pilhas)
git stash apply

OBS:quando vc usa o comando: git stash apply para voltar a constar os 
arquivos alterados no git, a pilha de lista ainda continua constando no git,
para remover a pilha de lista do git, utilize o comando abaixo.

#remove a pilha de lista do git
git stash drop

OBS:utilize o comando: git stash --list após o comando acima, para 
verificar que realmente não consta nenhuma pilha de lista no git.

#usado para selecionar um item especifico da pilha de lista
git stash apply stash@{numeroDoStash}

#retorna ao primeiro stash da pilha de lista e também já 
#remove o esse primeiro stash da pilha de lista
git stash pop

#limpa todos os stashs criados
git stash clear


#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# usando o git alias
#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#caso queira abreviar um comando que vc usa no git, utilize...
git config --global alias.abreviaçãoDoComando

OBS:o nome que vc utilizar depois do sinal de ponto no alias, será o 
nome abreviado do comando.

#para saber qual o comando que está associado ao alias.
git config --global alias.abreviaçãoDoComando

#para desfazer a abreviação do comando do alias, utilize...
git config --global --unset alias.abraviaçãoDoComando

#exibe uma lista de todos os alias configurados no git
git config --get-regexp alias

OBS:se não aparecer nada ao executar o comando acima, significa que 
não tem alias configurado no git.


#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# usando o git reverse
#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#remove as alterações feitas no último commit, revertendo o(s) arquivo(s) para o estado antes da alteração.
git revert numeroDoHashDoCommit


#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# usando o git 
#=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


git completo: do básico ao avançado do gabriel ferrari
git para iniciantes
